✅ 第四步：登出功能與登入保護頁面
本階段目標：

    實作 /logout 登出功能

    使用 @login_required 保護某些頁面（例如：記帳首頁只能登入後看）

    配合 current_user 取得目前登入者資料

✅ 1. 實作 /logout 登出功能
🔧 在 auth.py 中新增：

from flask_login import logout_user, login_required

@auth_bp.route("/logout")
@login_required
def logout():
    logout_user()
    flash("您已成功登出")
    return redirect(url_for("auth.login"))

✅ 2. 設定首頁 / 需要登入才能查看
🛠 修改你的 app.py：

from flask_login import login_required, current_user

@app.route("/")
@login_required
def home():
    return f"歡迎，{current_user.username}！"

這樣就完成了登入保護頁面：

    如果未登入訪問 /，會自動被導向到 /login

    成功登入後才會看到「歡迎，XXX」

✅ 小提醒：login_view 必須正確

你在 app.py 應該已經設定過這行：

login_manager.login_view = 'auth.login'

這樣 Flask-Login 才知道「未登入要導向哪個頁面」。
✅ 3. 使用 current_user 取得登入者資料

你可以在任何頁面中使用：

from flask_login import current_user

print(current_user.id)         # 使用者 ID
print(current_user.username)   # 使用者帳號

Flask-Login 幫你自動管理登入者狀態。
測試建議：

    註冊 → 登入 → 頁面顯示歡迎訊息

    按網址輸入 /logout → 自動登出 → 被導向 /login

    登出狀態下打開 / → 自動被導向 /login

✅ 第一題：首頁應該顯示什麼？是否改為 /expenses 比較好？
✔ 建議做法：

你可以把現在的 / 頁面改為：

    導向主要功能頁面（例如：/expenses）

    或是顯示登入者的基本資訊與快速入口

✨ 如果你的記帳功能是在 /expenses：

那麼你可以這樣設計：

@app.route("/")
@login_required
def home():
    return redirect(url_for("expenses.index"))  # 或你自己的藍圖名稱與函式

或者你也可以把 /expenses 設為你的「記帳主畫面」，而 / 僅為選單或導覽頁。
🧠 結論：

首頁（/）要不要用，取決於你作品的功能流程，你可以先保留 / 作為登入測試用、之後再決定要不要改成 /expenses 預設頁面。
✅ 第二題：current_user.id 等用法是做什麼用的？

這是非常關鍵的觀念，讓我幫你清楚釐清用途：
🔹 說法：「在任何頁面中使用」

意思是：只要是處理使用者資料的 Flask 路由、模板或後台邏輯中，都可以使用 current_user 來代表「目前登入的使用者」。
✅ 用途如下：
使用情境	用法	說明
後端查資料	current_user.id	拿來查詢這個使用者的資料
查個人花費	session.query(...).filter_by(user_id=current_user.id)	避免看到別人的資料
模板顯示名稱	{{ current_user.username }}	在 HTML 顯示歡迎訊息
開發除錯	print(current_user)	你在開發階段印出登入者資料看是否正確
🧠 白話總結：

    current_user 是 Flask-Login 幫你建立的登入者物件

    後端控制權限、前端顯示名字、資料查詢隔離 都會用到

    print(current_user) 是你開發除錯時看的，不是給使用者看

🔧 開發小提示：

你可以暫時在 / 寫這樣的測試內容來觀察：

@app.route("/")
@login_required
def home():
    return f"目前登入者 ID：{current_user.id}<br>帳號：{current_user.username}"

這樣你能很快知道登入成功與否，未來也能把這些資料拿去做條件過濾與資料隔離。

🎯 本次目標：實作 資料隔離功能

讓每位使用者只能看到自己的記帳資料。
🧩 步驟拆解與教學（以初學者角度）
🔧 步驟 1：在 Expense 資料表中加入 user_id 欄位

你要讓每一筆收支資料都「屬於某位使用者」，所以必須在模型裡加上：

from sqlalchemy import Column, Integer, ForeignKey
from flask_login import UserMixin

class Expense(Base):
    __tablename__ = "expense"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("user.id"), nullable=False)  # 🔺加這行
    ...

這樣每筆資料就會被標記是「哪位使用者」建立的。
🧠 問題：我原本的資料庫已經有資料了怎麼辦？

你有兩個選擇：

    用 Alembic 建 migration（進階）

    手動刪除 database.db 然後重建表格（快速簡單）

如果你還在開發階段，建議直接刪掉 database.db 檔案，再重新執行 Base.metadata.create_all(engine) 就好。
🔧 步驟 2：修改 POST 儲存資料時，將目前登入者的 user_id 存進資料庫

你目前的程式碼：

new_expense = Expense(category=..., amount=..., ...)

請改為：

from flask_login import current_user

new_expense = Expense(
    user_id=current_user.id,   # 🔺新增這行
    category=category,
    amount=int(amount),
    type=type_,
    date=date_obj,
    note=note
)

這樣儲存進來的資料會標上這是誰的紀錄。
🔧 步驟 3：查詢資料時，只撈出屬於當前使用者的資料

你的程式碼目前是：

params = get_query_parameters()
records = filtered_query(**params)

請確認 filtered_query 支援條件過濾，或直接手動加上：

from flask_login import current_user

params = get_query_parameters()
params["user_id"] = current_user.id  # 🔺 加入條件
records = filtered_query(**params)

如果 filtered_query() 是你自己寫的函式，你需要在裡面也加入對 user_id 的 .filter()，我可以幫你改。
🔧 步驟 4：在 expenses.html 中無需變更

目前你是透過迴圈：

{% for expense in expenses %}

只要後端有正確傳進來「屬於自己的資料」，前端就會正確顯示。
✏️ 小結教學回顧：
動作	原因
資料表加 user_id 欄位	記錄這筆資料是誰的
建立資料時加入 user_id	綁定使用者身分
查資料時過濾 user_id	避免看到別人資料
不需改前端	資料正確後，自然只會顯示該用戶資料