目標： 在 /category-report 頁面呈現「各類別的收支統計」，並用圖表展示（圓餅圖 or 長條圖）
✅ 第一步：新增查詢與分析邏輯

請你先完成以下動作：

    在 report_service.py 中新增函式 get_category_summary(records)：

        統計每個類別的「收入總和」與「支出總和」

        回傳格式如下：

        {
            "餐飲": {"income": 5000, "expense": 3200},
            "娛樂": {"income": 0, "expense": 2800},
            ...
        }

    測試方式：

        可以在現有的 /summary 路由中臨時加入這個函式來印出結果，確認資料正確後我們會建立新的頁面來顯示。

🔧 提示：

你可以使用類似下面的程式碼來開始撰寫：

from collections import defaultdict

def get_category_summary(records):
    summary = defaultdict(lambda: {"income": 0, "expense": 0})
    for record in records:
        if record.type == "income":
            summary[record.category]["income"] += record.amount
        elif record.type == "expense":
            summary[record.category]["expense"] += record.amount
    return dict(summary)

🔍 一、什麼是 defaultdict

defaultdict 是 Python 的一種特殊字典，來自 collections 模組。

跟普通字典不同的是：

    如果你存取一個「尚未出現的 key」，defaultdict 會自動幫你建立預設值。

    用法如下：

    from collections import defaultdict

    d = defaultdict(int)
    d["a"] += 1   # 自動建立 d["a"] = 0，再 +1 → 變成 1

🧠 這一行的解釋：

summary = defaultdict(lambda: {"income": 0, "expense": 0})

意思是：

    如果你用一個尚未存在的類別名稱（例如 "交通"）作為 key，那就自動建立一個字典 {"income": 0, "expense": 0} 作為它的初始值。

✅ 實際效果如下：

summary["娛樂"]   → {"income": 0, "expense": 0}（自動建立）

🧩 summary[record.category]["income"] += record.amount 的邏輯

這段程式碼可以翻譯成：

    找出這筆紀錄的分類（如 "娛樂"），如果是收入，就加到該分類的 income 數字上。

例子：

record.category == "娛樂"
record.type == "income"
record.amount == 2000

summary["娛樂"]["income"] += 2000

因為 summary["娛樂"] 一開始是：

{"income": 0, "expense": 0}

更新後變成：

{"income": 2000, "expense": 0}

🧾 return dict(summary) 的意思是什麼？

defaultdict 是一種特殊的資料型別，但為了回傳給其他函式或模板使用時更通用，我們用：

return dict(summary)

這樣會轉成普通的 Python 字典，像這樣：

{
    "餐飲": {"income": 3000, "expense": 2500},
    "娛樂": {"income": 0, "expense": 1800},
}

✅ 總結你學到的
語法	功能說明
defaultdict(lambda: {...})	自動初始化字典結構
summary[record.category]	以分類為 key 存取統計結果
["income"] += ...	針對收入欄位加總
return dict(...)	回傳為普通字典，避免外部錯誤

🔍 一、defaultdict(lambda: {"income": 0, "expense": 0}) 是什麼意思？

這是一個特殊的字典結構，來自 collections 模組：

from collections import defaultdict

summary = defaultdict(lambda: {"income": 0, "expense": 0})

✅ 功能：

如果你用 summary["餐飲"]，它會自動建立一個：

{"income": 0, "expense": 0}

這樣就不用事先手動宣告每個分類，非常方便：

summary["餐飲"]["income"] += 200
summary["交通"]["expense"] += 50

🔁 二、統計每個分類的金額

for record in records:
    summary[record.category][record.type] += record.amount

    record.category → 比如是 "餐飲"

    record.type → 是 "income" 或 "expense"

等於這樣的效果：

summary["餐飲"]["income"] += 500
summary["娛樂"]["expense"] += 300

📊 三、計算小計與支出比例

total_sum = 0
for cat, values in summary.items():
    total = values["income"] + values["expense"]
    summary[cat]["total"] = total
    total_sum += total

這一段做兩件事：

    幫每一個分類加上一個 "total" 欄位（收入＋支出）

    把所有分類的小計相加，得到 total_sum（整體總額）

🎯 四、計算每個分類的佔比 %

for cat, values in summary.items():
    values["rate"] = round((values["total"] / total_sum * 100), 1) if total_sum > 0 else 0

    比如 餐飲 total = 500，total_sum = 2000

    那它的占比就是 500 / 2000 * 100 = 25.0

🔁 最後回傳一個普通字典

return dict(summary)

因為 defaultdict 不適合直接渲染進 HTML，所以轉回一般字典。
🧠 總結：你會拿到這樣的結構

{
  "餐飲": {"income": 300, "expense": 200, "total": 500, "rate": 25.0},
  "交通": {"income": 0, "expense": 1000, "total": 1000, "rate": 50.0},
  ...
}

